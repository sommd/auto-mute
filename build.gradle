/*
 * Copyright (C) 2018 David Sommerich
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

buildscript {
    ext {
        // Toolkit versions
        kotlinVersion = '1.5.0'
        javaVersion = JavaVersion.VERSION_1_8

        // Get version string from git tag
        def describe = ['git', 'describe', '--tags', '--long', '--dirty'].execute().text.trim()

        // Parse version string
        def major = minor = patch = revision = commits = 0
        def release = null
        def commit = "unknown"
        def dirty = true
        def m = describe =~ /v(\d+)\.(\d+)\.(\d+)(-(alpha|beta).(\d+))?-(\d+)-g([^-]+)(-(dirty))?/
        if (m.matches()) {
            // Version
            major = m.group(1).toInteger()
            minor = m.group(2).toInteger()
            patch = m.group(3).toInteger()

            // Release: 'alpha', 'beta' or null
            release = m.group(5)
            // Revision: alpha/beta number or null
            revision = m.group(6)?.toInteger() ?: 0

            // Commits since last release
            commits = m.group(7)?.toInteger()
            // Commit hash
            commit = m.group(8)

            // Dirty?
            dirty = m.group(9) != null

            logger.quiet("Parsed version as: v$major.$minor.$patch " +
                    "${release != null ? "$release.$revision " : ""}" +
                    "$commits-$commit ${dirty ? "dirty" : "clean"}")
        } else {
            logger.error("Unable to parse version: $describe")
        }

        // Project version info
        projectVersion = [
                // Format: MAJOR_MINOR_PATCH_RELEASE_REVISION_COMMITS
                //             X____XX____XX_______X________X______XX
                // Max:       21____00____00_______0________0______00
                code  : major * 1_00_00_0_0_00 +
                        minor * 1_00_0_0_00 +
                        patch * 1_0_0_00 +
                        ['alpha', 'beta', null].indexOf(release) * 1_0_00 +
                        revision * 1_00 +
                        commits,
                name  : "$major.$minor.$patch" +
                        (release != null ? "-$release.$revision" : ""),
                suffix: "-$commits-$commit" +
                        (dirty ? "-dirty" : "")
        ]

        logger.quiet("Version code: $projectVersion.code (${2100000000 - projectVersion.code} below max)")
        logger.quiet("Version: $projectVersion.name$projectVersion.suffix")
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

subprojects {
    apply plugin: 'com.android.application'
    apply plugin: 'org.jetbrains.kotlin.android'

    repositories {
        google()
        mavenCentral()
    }

    android {
        compileSdkVersion 31
        buildToolsVersion "30.0.3"

        defaultConfig {
            minSdkVersion 26
            targetSdkVersion 31

            versionCode projectVersion.code
            versionName projectVersion.name

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        buildTypes {
            debug {
                applicationIdSuffix ".debug"
                versionNameSuffix projectVersion.suffix
            }

            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        compileOptions {
            sourceCompatibility javaVersion
            targetCompatibility javaVersion
        }
    }

    dependencies {
        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

        // AndroidX
        implementation 'androidx.core:core-ktx:1.3.2'
        implementation 'androidx.fragment:fragment-ktx:1.3.3'
        implementation "androidx.appcompat:appcompat:1.2.0"

        // JUnit
        testImplementation 'junit:junit:4.12'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
